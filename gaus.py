#реализовать метод Гауса


import numpy as np

def gaussian_elimination(A, B):
    # Объединяем матрицы A и B горизонтально, создавая расширенную матрицу.
    augmented_matrix = np.hstack((A, B))

    # Получаем размерность расширенной матрицы (количество уравнений и переменных).
    n, m = augmented_matrix.shape

    # Начинаем цикл по строкам матрицы для прямого хода метода Гаусса.
    for i in range(n):
        # Выбираем диагональный элемент текущей строки.
        divisor = augmented_matrix[i, i]

        # Делим всю строку на выбранный диагональный элемент, чтобы получить 1 на диагонали.
        augmented_matrix[i, :] /= divisor

        # Начинаем цикл по следующим строкам для обнуления элементов ниже диагонали.
        for j in range(i + 1, n):
            # Выбираем элемент ниже диагонали.
            factor = augmented_matrix[j, i]

            # Обнуляем элемент ниже диагонали путем вычитания произведения коэффициента и строки текущего уравнения.
            augmented_matrix[j, :] -= factor * augmented_matrix[i, :]

    # Инициализируем массив x для хранения решения.
    x = np.zeros(n)

    # Начинаем цикл для обратного хода метода Гаусса.
    for i in range(n - 1, -1, -1):
        # Присваиваем правую часть текущего уравнения переменной x[i].
        x[i] = augmented_matrix[i, -1]

        # Начинаем цикл для вычитания из x[i] остальных элементов.
        for j in range(i + 1, n):
            # Вычитаем произведение коэффициента и значения переменной из x[i].
            x[i] -= augmented_matrix[i, j] * x[j]

    # Возвращаем массив x с решением системы уравнений.
    return x

def main():
    # Ввод пользователем количества уравнений и переменных.
    n = int(input("Введите количество уравнений: "))
    m = int(input("Введите количество переменных: "))

    # Создание и заполнение матрицы коэффициентов A построчно.
    print("Введите матрицу коэффициентов A:")
    A = np.zeros((n, m))
    for i in range(n):
        A[i, :] = list(map(float, input().split()))

    # Создание и заполнение матрицы свободных членов B построчно.
    print("Введите матрицу свободных членов B:")
    B = np.zeros((n, 1))
    for i in range(n):
        B[i, 0] = float(input())

    # Вызов функции gaussian_elimination для решения системы уравнений.
    solution = gaussian_elimination(A, B)

    # Вывод решения системы уравнений.
    print("\nРешение системы:")
    for i, val in enumerate(solution):
        print(f"x{i + 1} =", val)

if __name__ == "__main__":
    main()
